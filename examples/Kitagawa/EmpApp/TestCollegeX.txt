#Empirical Example
#Card Data with Covariates

library("lattice");
library("fBasics")

Data<-read.table(file="CARD.raw", header=TRUE, sep=",");
card1<-data.frame( "Z2" = Data$nearc2, "Z4" = Data$nearc4, "edu" = Data$educ, "Y" = Data$lwage, "SMSA" = Data$smsa, "SMSA66"=Data$smsa66, "black" = Data$black, "south" = Data$south, "south66"=Data$south66, "fatheduc"=Data$fatheduc>=14, "motheduc"=Data$motheduc>=14, "parenteduc"=Data$fatheduc+Data$motheduc);
N<-length(card1$Y);
X<-cbind(card1$SMSA,card1$SMSA66,card1$black,card1$south,card1$south66);

D<-rep(0,N)  #More than 4-year college degree
for(i in 1:N){ if(carddata0$edu[i]>=16) D[i]<-1}; 
Z4<-card1$Z4;

carddata<-cbind(card1$Y, D, Z4,X);
dx<-length(X[1,]);

Xreg<-cbind(1,X);   #Regressor matrix
Pz1x<-Xreg%*%solve(t(Xreg)%*%Xreg)%*%t(Xreg)%*%Z4  #Linear probability estimates for Pr(Z=1|X).

kappa1<-D*(Z4 - Pz1x)/(Pz1x*(1-Pz1x));
kappa0<-(1-D)*((1-Z4) - (1- Pz1x))/(Pz1x*(1-Pz1x))

m<-length(subset(card1$Y,card1$Z4==1));
n<-length(subset(carddata$Y,card1$Z4==0));
lambda<-m/N;

Ygrids<-c(min(card1$Y), quantile(card1$Y,probs=seq(from=0.05, to=0.95, by=0.05)), max(card1$Y)); 
Yintervals<-t(combn(Ygrids,2));  #Generate the class of intervals for Y.
Nintervals<-length(Yintervals[,1]);
DY<-matrix(0,nrow=N,ncol=Nintervals);
for(i in 1:Nintervals){DY[,i]<-(Yintervals[i,1]<=carddata[,1])*(carddata[,1]<=Yintervals[i,2])}

Gind<-rep(0,N);  #Group index defined by every combination of the values of the dummy variables
for(i in 1:dx){Gind<-Gind+2^((i-1))*X[,i]}
Glist<-unique(Gind);
GN<-length(Glist);
DX<-matrix(0,nrow=N,ncol=GN);  #Dummy variables indicating each exclusive group
for(i in 1:GN){
               DX[,i]<-(Gind==Glist[i])
}

#Take a product of DY and DX
G<-matrix(0,nrow=N, ncol=Nintervals*GN);
for(i in 1:Nintervals){
                       G[,((i-1)*GN+1):(i*GN)]<-DY[,i]*DX;
}

xi<-0.07  #trimming constant.  To get Table 1, set xi equal to 0.07, 0.3, or 1.

numerator1<-t(kappa1)%*%G/N;
numerator0<-t(kappa0)%*%G/N;
weight1<-pmax(xi,sqrt(t(kappa1^2)%*%G/N - numerator1^2));  #weighting term in the maximand
weight0<-pmax(xi,sqrt(t(kappa0^2)%*%G/N - numerator0^2)); 

teststat<-sqrt(N)*max(c(-numerator1/weight1,-numerator0/weight0));  #Teststatistic in the original sample

############################Compute the Bootstrap p-values#######################################
B<-500;
teststatboot<-rep(0,B);

for(b in 1:B){
             resample<-sample(c(1:N),size=N,replace=TRUE) 
             kappa1boot<-kappa1[resample]; 
             kappa0boot<-kappa0[resample];
             Gboot<-G[resample,];
             numerator1boot<-t(kappa1boot)%*%Gboot/N - numerator1;
             numerator0boot<-t(kappa0boot)%*%Gboot/N - numerator0;
             weight1boot<-pmax(xi,sqrt(t(kappa1boot^2)%*%Gboot/N - (t(kappa1boot)%*%Gboot/N)^2));
             weight0boot<-pmax(xi,sqrt(t(kappa0boot^2)%*%Gboot/N - (t(kappa0boot)%*%Gboot/N)^2));
             teststatboot[b]<-sqrt(N)*max(c(-numerator1boot/weight1boot,-numerator0boot/weight0boot));  #Teststatistic in the original sample
}

pval<-sum(teststat<=teststatboot)/B;

teststat
pval
